# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Root
GET		/															controllers.ApplicationController.getChoicePage

# ----------- Client Side -----------

# Overview
GET 	/services/clientside/$binder<issues>						controllers.ClientSideIssues.getClientSideOverview(binder: IssueOverviewStateBinder)
GET 	/services/clientside/$binder<issues/open>					controllers.ClientSideIssues.getClientSideOverview(binder: IssueOverviewStateBinder)
GET 	/services/clientside/$binder<issues/claimed/.*/assigned>	controllers.ClientSideIssues.getClientSideOverview(binder: IssueOverviewStateBinder)
GET 	/services/clientside/$binder<issues/claimed/.*/notassigned>	controllers.ClientSideIssues.getClientSideOverview(binder: IssueOverviewStateBinder)
GET 	/services/clientside/$binder<issues/closed>					controllers.ClientSideIssues.getClientSideOverview(binder: IssueOverviewStateBinder)

# Close issues
GET		/services/clientside/issues/closing							controllers.ClientSideIssues.issuesClosing()
POST	/services/clientside/issues/closed							controllers.ClientSideIssues.closeIssues()

# Open issue
POST	/services/clientside/issues/open							controllers.ClientSideIssues.unassignIssue()

# Assign Issue
POST	/services/clientside/issues/claimed/:id/assigned			controllers.ClientSideIssues.assignIssueToUser(id: String)

# Single Issue
GET		/services/clientside/issues/:id								controllers.ClientSideIssues.getIssue(id: Int)
POST	/services/clientside/issues/:id								controllers.ClientSideIssues.updateIssue(id: Int)

# ----------- Server Side -----------

# Overview
GET		/services/issues/											controllers.ApplicationController.getRoot()
GET     /services/$binder<issues>									controllers.ApplicationController.getIssueOverview(partialSorting: PartialSorting, page: PaginationFilter, selectionFilter: SelectionFilter,binder: IssueOverviewStateBinder)
GET		/services/$binder<issues/open>								controllers.ApplicationController.getIssueOverview(partialSorting: PartialSorting, page: PaginationFilter, selectionFilter: SelectionFilter,binder: IssueOverviewStateBinder)
GET		/services/$binder<issues/claimed/.*/assigned>				controllers.ApplicationController.getIssueOverview(partialSorting: PartialSorting, page: PaginationFilter, selectionFilter: SelectionFilter,binder: IssueOverviewStateBinder)
GET		/services/$binder<issues/claimed/.*/notassigned>			controllers.ApplicationController.getIssueOverview(partialSorting: PartialSorting, page: PaginationFilter, selectionFilter: SelectionFilter,binder: IssueOverviewStateBinder)
GET		/services/$binder<issues/closed>							controllers.ApplicationController.getIssueOverview(partialSorting: PartialSorting, page: PaginationFilter, selectionFilter: SelectionFilter,binder: IssueOverviewStateBinder)

# Close issues
GET		/services/issues/closing									controllers.ApplicationController.getIssuesClosingProcess()
POST	/services/issues/closed										controllers.ApplicationController.closeIssues()

# Open issue
POST	/services/issues/open										controllers.ApplicationController.removeIssueAssignment(partialSorting: PartialSorting, page: PaginationFilter, selectionFilter: SelectionFilter)

# Assign Issue
POST	/services/issues/claimed/:id/assigned						controllers.ApplicationController.assignIssueToUser(id: String,partialSorting: PartialSorting, page: PaginationFilter, selectionFilter: SelectionFilter)

# Single Issue
GET		/services/issues/:id										controllers.ApplicationController.getIssueDetails(id: Int)
POST	/services/issues/:id										controllers.ApplicationController.updateIssue(id: Int)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


